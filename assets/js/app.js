const callInfo = () => {
    alert('The target of the Captcha is to get the correct number placement as it was generated by the system any number market with yellow is not properperly place and the onces market with red is invalid which means not generated in memory');
}



let inputs = document.querySelectorAll('input');
let trail = document.querySelector('.trials');
let check_counter = 0;
// GRABBING OUR CELLS
const cell = document.querySelectorAll('.cell')
const modal = document.querySelector('.modal-message');
const message = document.querySelector('.message');
let counter = 0; /* COUNTER FOR TRAVERSING */
let numbers = []
let initial = 0;
let excess = 4;
reload();
// LOOPING THROUGH THE CELLS
cell.forEach(function (box, id) {
    box.onclick = function (event) {
        cell.forEach(function (el, mainid) {
            if (id == mainid) {
                el.classList.add('active');
                counter = mainid
            } else {
                cell[mainid].classList.remove('active');
            }
        })
    }
})

// KEYBOARD CONTROLS FOR NAVIGATION AND NUMBER MANIPULATION
document.onkeydown = function (event) {
    switch (event.key) {
        case "ArrowUp" : runUp();
            break
        case "ArrowDown" : runDown();
            break
        case "ArrowLeft" : runLeft();
            break
        case "ArrowRight" : runRight();
            break
        case "Enter" : check();
            break 
    }
}

// KEY UP RESPONSE
function runUp() {
    cell.forEach((cell, id) => {
        if (cell.classList.contains('active')) {
            value = cell.parentElement.querySelector(`#_${id}`)
            if (value.value < 9) {
                value.value++;
                cell.innerHTML = value.value;
            } else {
                value.value = 0
                cell.innerHTML = value.value;
            }
        }
    })
}


// KEY DOWN RESPONSE
function runDown() {
    cell.forEach((cell, id) => {
        if (cell.classList.contains('active')) {
            value = cell.parentElement.querySelector(`#_${id}`)
            value.value--;
            cell.innerHTML = value.value;
            if (value.value < 0) {
                value.value = 9
                cell.innerHTML = value.value;
            }
        }
    })
}

// KEY LEFT RESPONSE
function runLeft() {
    counter--
    if (counter < 0) {
        counter = 3
    }
    cell.forEach(function (el, mainid) {
        if (counter == mainid) {
            el.classList.add('active');
        } else {
            cell[mainid].classList.remove('active');
        }
    })
}

//  KEY RIGHT RESPONSE
function runRight() {
    if (counter < 3) {
        counter++
    } else {
        counter = 0
    }
    cell.forEach(function (el, mainid) {
        if (counter == mainid) {
            el.classList.add('active');
        } else {
            cell[mainid].classList.remove('active');
        }
    })
}


function reload() {
    while (initial < excess) {
        let spc = Math.floor(Math.random() * 10);
        if (!numbers.includes(spc)) {
            numbers.push(spc)
            initial++;
        }
    }
}


// SETTING PICKED ANSWERS INTO THE HTML
function setPicked(answer) {
    holder = document.createElement('div');
    holder.classList.add('holder')
    trail.appendChild(holder)

    p1 = document.createElement('p')
    p1.innerHTML = answer[0];

    p2 = document.createElement('p')
    p2.innerHTML = answer[1];

    p3 = document.createElement('p')
    p3.innerHTML = answer[2];

    p4 = document.createElement('p')
    p4.innerHTML = answer[3];

    holder.appendChild(p1)
    holder.appendChild(p2)
    holder.appendChild(p3)
    holder.appendChild(p4)
}
 
function check() {
    if (check_counter < 5) {
        let answer = [
            inputs[0].value,
            inputs[1].value,
            inputs[2].value,
            inputs[3].value,
        ];
        setTimeout(() => {
            
            setPicked(answer)

            setTimeout(() => {
                let holder = document.querySelectorAll('.trials .holder');
                let p_values = holder[check_counter].querySelectorAll('p');

                for (i = 0; i < numbers.length; i++) {
                    if (numbers[i] == answer[i]) {
                        p_values[i].classList.add('green')
                    } else if (numbers.includes(Number(p_values[i].innerHTML))) {
                        p_values[i].classList.add('gold');
                    } else {
                        p_values[i].classList.add('red');
                    }
                }

                // VALIDATING THE CAPTCHA
                if (String(numbers) === String(answer)) {
                    crackedCaptcha(1)   
                }
                check_counter++;
            }, 0);
        }, 10)
    } else { 
        navigator.vibrate(200)
        setTimeout(() => {
            navigator.vibrate(100)
        }, 100);
        reset();
    }
}



// RESET VALUES
function reset(status) {
    if (status == 0) {
        crackedCaptcha(0);
    }
    console.log(`TRAILS EXCEEDED ${check_counter} TIMES`);
    initial = 0;
    trail.innerHTML = '';
    numbers.splice(0, numbers.length);
    check_counter = 0;
    reload();   

    cell.forEach((el, id) => {
        el.innerHTML = '0'
        el.nextElementSibling.value = 0;
    })
}

function crackedCaptcha(status) {
    msg = status == 0 ? 'FAILED' : 'CRACKED';
    
    message.textContent = msg
    modal.classList.add('pop')
    setTimeout(() => {
        if (status == 0) {
            message.classList.add('failed');
        } else {
            message.classList.add('cracked');
        }
        
        setTimeout(() => {
            if (status == 0) {
                message.classList.remove('failed');
            } else {
                const btn = document.createElement('button');
                btn.classList.add('modal-btn');
                btn.setAttribute('onclick', 'sendToPage()')
                btn.innerHTML = 'PROCEED';
                modal.appendChild(btn);
            } 
            setTimeout(() => {
                if (status == 0) {
                    modal.classList.remove('pop')
                }
            }, 900);
        }, 1000);
    },1300)
}

function sendToPage() {
    window.location.href = 'crack.html';
}


// TOUCH EVENT
// const icons = document.querySelectorAll('.icon')
// let timer
// const milis = 5
// icons[0].addEventListener('touchstart', () => {
//     timer = setInterval(() => {  
//         runUp()
// }, milis * 20)}, false);
// icons[0].addEventListener('touchend', () => {clearInterval(timer)}, false);

// icons[1].addEventListener('touchstart', () => {
//     timer = setInterval(() => {  
//         runDown()
// }, milis * 20)}, false);
// icons[1].addEventListener('touchend', () => {clearInterval(timer)}, false);

// icons[2].addEventListener('touchstart', () => {
//     timer = setInterval(() => {  
//         runLeft()
// }, milis * 100)}, false);
// icons[2].addEventListener('touchend', () => {clearInterval(timer)}, false);

// icons[3].addEventListener('touchstart', () => {
//     timer = setInterval(() => {  
//         runRight()
// }, milis * 100)}, false);
// icons[3].addEventListener('touchend', () => {clearInterval(timer)}, false);



